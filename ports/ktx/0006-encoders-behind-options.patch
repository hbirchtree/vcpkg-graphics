diff --git a/CMakeLists.txt b/CMakeLists.txt
index b37b8dc9..8870b91d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -43,6 +43,7 @@ option( KTX_FEATURE_LOADTEST_APPS "Create load tests apps that load and display
 option( KTX_FEATURE_STATIC_LIBRARY "Create static libraries (shared otherwise)" ${LIB_TYPE_DEFAULT} )
 option( KTX_FEATURE_TESTS "Create unit tests" ON )
 option( KTX_FEATURE_JNI "Create Java bindings for libktx" OFF )
+option( KTX_FEATURE_ENCODERS "Enable encoders" OFF )
 
 if(POLICY CMP0127)
     # cmake_dependent_option() supports full Condition Syntax. Introduced in
@@ -471,58 +472,64 @@ PRIVATE
     BASISD_SUPPORT_KTX2=0
 )
 
-# Adding write capability to target ktx
-
-set(BASISU_ENCODER_CXX_SRC
-    lib/basisu/encoder/basisu_backend.cpp
-    lib/basisu/encoder/basisu_backend.h
-    lib/basisu/encoder/basisu_basis_file.cpp
-    lib/basisu/encoder/basisu_basis_file.h
-    lib/basisu/encoder/basisu_bc7enc.cpp
-    lib/basisu/encoder/basisu_bc7enc.h
-    lib/basisu/encoder/basisu_comp.cpp
-    lib/basisu/encoder/basisu_comp.h
-    lib/basisu/encoder/basisu_enc.cpp
-    lib/basisu/encoder/basisu_enc.h
-    lib/basisu/encoder/basisu_etc.cpp
-    lib/basisu/encoder/basisu_etc.h
-    lib/basisu/encoder/basisu_frontend.cpp
-    lib/basisu/encoder/basisu_frontend.h
-    lib/basisu/encoder/basisu_gpu_texture.cpp
-    lib/basisu/encoder/basisu_gpu_texture.h
-    lib/basisu/encoder/basisu_kernels_declares.h
-    lib/basisu/encoder/basisu_kernels_imp.h
-    lib/basisu/encoder/basisu_kernels_sse.cpp
-    lib/basisu/encoder/basisu_miniz.h
-    lib/basisu/encoder/basisu_opencl.cpp
-    lib/basisu/encoder/basisu_opencl.h
-    lib/basisu/encoder/basisu_pvrtc1_4.cpp
-    lib/basisu/encoder/basisu_pvrtc1_4.h
-    lib/basisu/encoder/basisu_resample_filters.cpp
-    lib/basisu/encoder/basisu_resampler_filters.h
-    lib/basisu/encoder/basisu_resampler.cpp
-    lib/basisu/encoder/basisu_resampler.h
-    lib/basisu/encoder/basisu_ssim.cpp
-    lib/basisu/encoder/basisu_ssim.h
-    lib/basisu/encoder/basisu_uastc_enc.cpp
-    lib/basisu/encoder/basisu_uastc_enc.h
-    lib/basisu/encoder/cppspmd_flow.h
-    lib/basisu/encoder/cppspmd_math.h
-    lib/basisu/encoder/cppspmd_math_declares.h
-    lib/basisu/encoder/cppspmd_sse.h
-    lib/basisu/encoder/cppspmd_type_aliases.h
-)
+if(KTX_FEATURE_ENCODERS)
+    # Adding write capability to target ktx
+
+    set(BASISU_ENCODER_CXX_SRC
+        lib/basisu/encoder/basisu_backend.cpp
+        lib/basisu/encoder/basisu_backend.h
+        lib/basisu/encoder/basisu_basis_file.cpp
+        lib/basisu/encoder/basisu_basis_file.h
+        lib/basisu/encoder/basisu_bc7enc.cpp
+        lib/basisu/encoder/basisu_bc7enc.h
+        lib/basisu/encoder/basisu_comp.cpp
+        lib/basisu/encoder/basisu_comp.h
+        lib/basisu/encoder/basisu_enc.cpp
+        lib/basisu/encoder/basisu_enc.h
+        lib/basisu/encoder/basisu_etc.cpp
+        lib/basisu/encoder/basisu_etc.h
+        lib/basisu/encoder/basisu_frontend.cpp
+        lib/basisu/encoder/basisu_frontend.h
+        lib/basisu/encoder/basisu_gpu_texture.cpp
+        lib/basisu/encoder/basisu_gpu_texture.h
+        lib/basisu/encoder/basisu_kernels_declares.h
+        lib/basisu/encoder/basisu_kernels_imp.h
+        lib/basisu/encoder/basisu_kernels_sse.cpp
+        lib/basisu/encoder/basisu_miniz.h
+        lib/basisu/encoder/basisu_opencl.cpp
+        lib/basisu/encoder/basisu_opencl.h
+        lib/basisu/encoder/basisu_pvrtc1_4.cpp
+        lib/basisu/encoder/basisu_pvrtc1_4.h
+        lib/basisu/encoder/basisu_resample_filters.cpp
+        lib/basisu/encoder/basisu_resampler_filters.h
+        lib/basisu/encoder/basisu_resampler.cpp
+        lib/basisu/encoder/basisu_resampler.h
+        lib/basisu/encoder/basisu_ssim.cpp
+        lib/basisu/encoder/basisu_ssim.h
+        lib/basisu/encoder/basisu_uastc_enc.cpp
+        lib/basisu/encoder/basisu_uastc_enc.h
+        lib/basisu/encoder/cppspmd_flow.h
+        lib/basisu/encoder/cppspmd_math.h
+        lib/basisu/encoder/cppspmd_math_declares.h
+        lib/basisu/encoder/cppspmd_sse.h
+        lib/basisu/encoder/cppspmd_type_aliases.h
+    )
 
-target_sources(
-    ktx
-PRIVATE
-    lib/basis_encode.cpp
-    lib/astc_encode.cpp
-    ${BASISU_ENCODER_C_SRC}
-    ${BASISU_ENCODER_CXX_SRC}
+    target_sources(
+        ktx
+    PRIVATE
+        lib/basis_encode.cpp
+        lib/astc_encode.cpp
+        ${BASISU_ENCODER_C_SRC}
+        ${BASISU_ENCODER_CXX_SRC}
+    )
+
+endif() # KTX_FEATURE_ENCODERS
+
+target_sources(ktx PRIVATE
     lib/writer1.c
     lib/writer2.c
-)
+    )
 
 # Turn off these warnings until Rich fixes the occurences.
 # It it not clear to me if generator expressions can be used here
@@ -780,73 +787,77 @@ endif()
 
 add_subdirectory(interface/basisu_c_binding)
 
-# Only one architecture is supported at once, if neither of
-# ISA_SSE41 and ISA_SSE2  are defined ISA_AVX2 is chosen.
-# If ISA_AVX2 fails to compile user must chose other x86 options.
-# On arm based systems ISA_NEON is default
+if(KTX_FEATURE_ENCODERS)
+    # Only one architecture is supported at once, if neither of
+    # ISA_SSE41 and ISA_SSE2  are defined ISA_AVX2 is chosen.
+    # If ISA_AVX2 fails to compile user must chose other x86 options.
+    # On arm based systems ISA_NEON is default
 
-list(FIND CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)" ASTC_BUILD_UNIVERSAL)
+    list(FIND CMAKE_OSX_ARCHITECTURES "$(ARCHS_STANDARD)" ASTC_BUILD_UNIVERSAL)
 
-if(${ASTC_BUILD_UNIVERSAL} EQUAL -1)
-    if (${ISA_NONE})
-        set(ASTC_LIB_TARGET astcenc-none-static)
-    else()
-        if(CPU_ARCHITECTURE STREQUAL x86_64 OR CPU_ARCHITECTURE STREQUAL x86)
-            if (${ISA_SSE41})
-                set(ASTC_LIB_TARGET astcenc-sse4.1-static)
-            elseif (${ISA_SSE2})
-                set(ASTC_LIB_TARGET astcenc-sse2-static)
+    if(${ASTC_BUILD_UNIVERSAL} EQUAL -1)
+        if (${ISA_NONE})
+            set(ASTC_LIB_TARGET astcenc-none-static)
+        else()
+            if(CPU_ARCHITECTURE STREQUAL x86_64 OR CPU_ARCHITECTURE STREQUAL x86)
+                if (${ISA_SSE41})
+                    set(ASTC_LIB_TARGET astcenc-sse4.1-static)
+                elseif (${ISA_SSE2})
+                    set(ASTC_LIB_TARGET astcenc-sse2-static)
+                else()
+                    set(ISA_AVX2 ON)
+                    set(ASTC_LIB_TARGET astcenc-avx2-static)
+                endif()
+                if(CPU_ARCHITECTURE STREQUAL x86)
+                    set(ISA_NONE ON)
+                    set(ISA_AVX2 OFF)
+                    set(ASTCENC_POPCNT 0)
+                    set(ASTC_LIB_TARGET astcenc-none-static)
+                endif()
+            elseif(CPU_ARCHITECTURE STREQUAL armv8 OR CPU_ARCHITECTURE STREQUAL arm64)
+                set(ASTC_LIB_TARGET astcenc-neon-static)
+                set(ISA_NEON ON)
             else()
-                set(ISA_AVX2 ON)
-                set(ASTC_LIB_TARGET astcenc-avx2-static)
-            endif()
-            if(CPU_ARCHITECTURE STREQUAL x86)
-                set(ISA_NONE ON)
-                set(ISA_AVX2 OFF)
-                set(ASTCENC_POPCNT 0)
+                message(STATUS "Unsupported ISA for ${CPU_ARCHITECTURE} arch, using ISA_NONE.")
                 set(ASTC_LIB_TARGET astcenc-none-static)
+                set(ISA_NONE ON)
             endif()
-        elseif(CPU_ARCHITECTURE STREQUAL armv8 OR CPU_ARCHITECTURE STREQUAL arm64)
-            set(ASTC_LIB_TARGET astcenc-neon-static)
-            set(ISA_NEON ON)
-        else()
-            message(STATUS "Unsupported ISA for ${CPU_ARCHITECTURE} arch, using ISA_NONE.")
-            set(ASTC_LIB_TARGET astcenc-none-static)
-            set(ISA_NONE ON)
         endif()
+    else()
+        set(ASTC_LIB_TARGET astcenc-static)
     endif()
-else()
-    set(ASTC_LIB_TARGET astcenc-static)
-endif()
 
-if(NOT ANDROID)
-# astcenc
-set(CLI OFF) # Only build as library not the CLI astcencoder
-add_subdirectory(lib/astc-encoder)
-set_property(TARGET ${ASTC_LIB_TARGET} PROPERTY POSITION_INDEPENDENT_CODE ON)
-
-if(KTX_FEATURE_STATIC_LIBRARY AND NOT WIN32 AND NOT EMSCRIPTEN)
-    # Make a single static library to simplify linking.
-    add_dependencies(ktx ${ASTC_LIB_TARGET})
-    set(LIBTOOL_ARGS)
-    if(LINUX)
-        set(LIBTOOL_ARGS ${LIBTOOL_ARGS} --mode=link --tag=CC cc)
+    if(NOT ANDROID)
+    # astcenc
+    set(CLI OFF) # Only build as library not the CLI astcencoder
+    add_subdirectory(lib/astc-encoder)
+    set_property(TARGET ${ASTC_LIB_TARGET} PROPERTY POSITION_INDEPENDENT_CODE ON)
+
+    if(KTX_FEATURE_STATIC_LIBRARY AND NOT WIN32 AND NOT EMSCRIPTEN)
+        # Make a single static library to simplify linking.
+        add_dependencies(ktx ${ASTC_LIB_TARGET})
+        set(LIBTOOL_ARGS)
+        if(LINUX)
+            set(LIBTOOL_ARGS ${LIBTOOL_ARGS} --mode=link --tag=CC cc)
+        endif()
+        set(LIBTOOL_ARGS ${LIBTOOL_ARGS} -static -o
+            $<TARGET_FILE:ktx> $<TARGET_FILE:ktx> $<TARGET_FILE:${ASTC_LIB_TARGET}>)
+        add_custom_command( TARGET ktx
+            POST_BUILD
+            COMMAND libtool ${LIBTOOL_ARGS}
+        )
+
+        # Don't know libtool equivalent on Windows or Emscripten. Applications
+        # will have to link with  both ktx and ${ASTC_LIB_TARGET}. Static libs
+        # are unlikely to be used on Windows so not a problem there. For Emscripten
+        # everything is built into the JS module so not an issue there either.
+    else()
+        target_link_libraries(ktx PRIVATE ${ASTC_LIB_TARGET})
+    endif()
     endif()
-    set(LIBTOOL_ARGS ${LIBTOOL_ARGS} -static -o
-        $<TARGET_FILE:ktx> $<TARGET_FILE:ktx> $<TARGET_FILE:${ASTC_LIB_TARGET}>)
-    add_custom_command( TARGET ktx
-        POST_BUILD
-        COMMAND libtool ${LIBTOOL_ARGS}
-    )
 
-    # Don't know libtool equivalent on Windows or Emscripten. Applications
-    # will have to link with  both ktx and ${ASTC_LIB_TARGET}. Static libs
-    # are unlikely to be used on Windows so not a problem there. For Emscripten
-    # everything is built into the JS module so not an issue there either.
-else()
-    target_link_libraries(ktx PRIVATE ${ASTC_LIB_TARGET})
-endif()
-endif()
+endif() # KTX_FEATURE_ENCODERS
+
 # Tools
 if(KTX_FEATURE_TOOLS)
     add_subdirectory(tools)
